theory Jessie_model

use import int.Int

use bool.Bool

use int.ComputerDivision

use import jessie_why3theories.Jessie_memory_model

type _Object

type interface

function _BinarySearch_tag  : (tag_id _Object)

function _Object_tag  : (tag_id _Object)

axiom _BinarySearch_parenttag_Object "BinarySearch_parenttag_Object":
 (parenttag _BinarySearch_tag _Object_tag)

function _Exception_tag  : (tag_id _Object)

axiom _Exception_parenttag_Object "Exception_parenttag_Object":
 (parenttag _Exception_tag _Object_tag)

predicate _Non_null_Object(x_1:(pointer _Object)) (_Object_alloc_table:(alloc_table _Object)) =
 (Int.(>=) (offset_max _Object_alloc_table x_1) (0))

predicate _Non_null_intM(x_0:(pointer _Object)) (_Object_alloc_table:(alloc_table _Object)) =
 (Int.(>=) (offset_max _Object_alloc_table x_0) (Int.(-_) (1)))

axiom _Object_int "Object_int": ((int_of_tag _Object_tag) = (1))

function _Object_of_pointer_address (pointer ()) : (pointer _Object)

axiom _Object_of_pointer_address_of_pointer_addr "Object_of_pointer_address_of_pointer_addr":
 (forall p:(pointer _Object).
  (p = (_Object_of_pointer_address (pointer_address p))))

axiom _Object_parenttag_bottom "Object_parenttag_bottom":
 (parenttag _Object_tag bottom_tag)

axiom _Object_tags "Object_tags":
 (forall x:(pointer _Object).
  (forall _Object_tag_table:(tag_table _Object).
   (instanceof _Object_tag_table x _Object_tag)))

function _String_tag  : (tag_id _Object)

axiom _String_parenttag_Object "String_parenttag_Object":
 (parenttag _String_tag _Object_tag)

function _Throwable_tag  : (tag_id _Object)

axiom _Throwable_parenttag_Object "Throwable_parenttag_Object":
 (parenttag _Throwable_tag _Object_tag)

function intM_tag  : (tag_id _Object)

axiom intM_parenttag_Object "intM_parenttag_Object":
 (parenttag intM_tag _Object_tag)

function interface_tag  : (tag_id interface)

axiom interface_int "interface_int": ((int_of_tag interface_tag) = (1))

function interface_of_pointer_address (pointer ()) : (pointer interface)

axiom interface_of_pointer_address_of_pointer_addr "interface_of_pointer_address_of_pointer_addr":
 (forall p:(pointer interface).
  (p = (interface_of_pointer_address (pointer_address p))))

axiom interface_parenttag_bottom "interface_parenttag_bottom":
 (parenttag interface_tag bottom_tag)

axiom interface_tags "interface_tags":
 (forall x:(pointer interface).
  (forall interface_tag_table:(tag_table interface).
   (instanceof interface_tag_table x interface_tag)))

predicate is_sorted(t:(pointer _Object)) (_Object_alloc_table_at_L:(alloc_table _Object)) (intM_intP_at_L:(memory _Object int)) =
 ((_Non_null_intM t _Object_alloc_table_at_L)
 /\ (forall i:int.
     (forall j:int.
      (((Int.(<=) (0) i)
       /\ ((Int.(<=) i j)
          /\ (Int.(<) j
             (Int.(+) (offset_max _Object_alloc_table_at_L t) (1))))) ->
       (Int.(<=) (select intM_intP_at_L (shift t i))
       (select intM_intP_at_L (shift t j)))))))

predicate left_valid_struct_Object(p:(pointer _Object)) (a:int) (_Object_alloc_table:(alloc_table _Object)) =
 ((offset_min _Object_alloc_table p) <= a)

predicate left_valid_struct_BinarySearch(p:(pointer _Object)) (a:int) (_Object_alloc_table:(alloc_table _Object)) =
 (left_valid_struct_Object p a _Object_alloc_table)

predicate left_valid_struct_Exception(p:(pointer _Object)) (a:int) (_Object_alloc_table:(alloc_table _Object)) =
 (left_valid_struct_Object p a _Object_alloc_table)

predicate left_valid_struct_String(p:(pointer _Object)) (a:int) (_Object_alloc_table:(alloc_table _Object)) =
 (left_valid_struct_Object p a _Object_alloc_table)

predicate left_valid_struct_Throwable(p:(pointer _Object)) (a:int) (_Object_alloc_table:(alloc_table _Object)) =
 (left_valid_struct_Object p a _Object_alloc_table)

predicate left_valid_struct_intM(p:(pointer _Object)) (a:int) (_Object_alloc_table:(alloc_table _Object)) =
 (left_valid_struct_Object p a _Object_alloc_table)

predicate left_valid_struct_interface(p:(pointer interface)) (a:int) (interface_alloc_table:(alloc_table interface)) =
 ((offset_min interface_alloc_table p) <= a)

axiom pointer_addr_of_Object_of_pointer_address "pointer_addr_of_Object_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (_Object_of_pointer_address p))))

axiom pointer_addr_of_interface_of_pointer_address "pointer_addr_of_interface_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (interface_of_pointer_address p))))

predicate right_valid_struct_Object(p:(pointer _Object)) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 ((offset_max _Object_alloc_table p) >= b)

predicate right_valid_struct_BinarySearch(p:(pointer _Object)) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (right_valid_struct_Object p b _Object_alloc_table)

predicate right_valid_struct_Exception(p:(pointer _Object)) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (right_valid_struct_Object p b _Object_alloc_table)

predicate right_valid_struct_String(p:(pointer _Object)) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (right_valid_struct_Object p b _Object_alloc_table)

predicate right_valid_struct_Throwable(p:(pointer _Object)) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (right_valid_struct_Object p b _Object_alloc_table)

predicate right_valid_struct_intM(p:(pointer _Object)) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (right_valid_struct_Object p b _Object_alloc_table)

predicate right_valid_struct_interface(p:(pointer interface)) (b:int) (interface_alloc_table:(alloc_table interface)) =
 ((offset_max interface_alloc_table p) >= b)

predicate strict_valid_root_Object(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (((offset_min _Object_alloc_table p) = a)
 /\ ((offset_max _Object_alloc_table p) = b))

predicate strict_valid_root_interface(p:(pointer interface)) (a:int) (b:int) (interface_alloc_table:(alloc_table interface)) =
 (((offset_min interface_alloc_table p) = a)
 /\ ((offset_max interface_alloc_table p) = b))

predicate strict_valid_struct_Object(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (((offset_min _Object_alloc_table p) = a)
 /\ ((offset_max _Object_alloc_table p) = b))

predicate strict_valid_struct_BinarySearch(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (strict_valid_struct_Object p a b _Object_alloc_table)

predicate strict_valid_struct_Exception(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (strict_valid_struct_Object p a b _Object_alloc_table)

predicate strict_valid_struct_String(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (strict_valid_struct_Object p a b _Object_alloc_table)

predicate strict_valid_struct_Throwable(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (strict_valid_struct_Object p a b _Object_alloc_table)

predicate strict_valid_struct_intM(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (strict_valid_struct_Object p a b _Object_alloc_table)

predicate strict_valid_struct_interface(p:(pointer interface)) (a:int) (b:int) (interface_alloc_table:(alloc_table interface)) =
 (((offset_min interface_alloc_table p) = a)
 /\ ((offset_max interface_alloc_table p) = b))

predicate valid_root_Object(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (((offset_min _Object_alloc_table p) <= a)
 /\ ((offset_max _Object_alloc_table p) >= b))

predicate valid_root_interface(p:(pointer interface)) (a:int) (b:int) (interface_alloc_table:(alloc_table interface)) =
 (((offset_min interface_alloc_table p) <= a)
 /\ ((offset_max interface_alloc_table p) >= b))

predicate valid_struct_Object(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (((offset_min _Object_alloc_table p) <= a)
 /\ ((offset_max _Object_alloc_table p) >= b))

predicate valid_struct_BinarySearch(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (valid_struct_Object p a b _Object_alloc_table)

predicate valid_struct_Exception(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (valid_struct_Object p a b _Object_alloc_table)

predicate valid_struct_String(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (valid_struct_Object p a b _Object_alloc_table)

predicate valid_struct_Throwable(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (valid_struct_Object p a b _Object_alloc_table)

predicate valid_struct_intM(p:(pointer _Object)) (a:int) (b:int) (_Object_alloc_table:(alloc_table _Object)) =
 (valid_struct_Object p a b _Object_alloc_table)

predicate valid_struct_interface(p:(pointer interface)) (a:int) (b:int) (interface_alloc_table:(alloc_table interface)) =
 (((offset_min interface_alloc_table p) <= a)
 /\ ((offset_max interface_alloc_table p) >= b))

end

module Jessie_program

use import int.Int

use bool.Bool

use int.ComputerDivision

use import jessie_why3theories.Jessie_memory_model

use import Jessie_model

use import ref.Ref

use import jessie_why3.JessieDivision

use import jessie_why3.Jessie_memory_model_parameters

val _Object_alloc_table : ref (alloc_table _Object)

val intM_intP : ref (memory _Object int)

val _BinarySearch_binary_search
 (t_0:(pointer _Object))
  (v:int) : int
   requires { true } reads { _Object_alloc_table, intM_intP } 
    ensures { (((is_sorted t_0 (old !_Object_alloc_table) (old !intM_intP)) ->
                (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 33 17 96#
                ((result = (Int.(-_) (1))) ->
                 (forall k:int.
                  (((Int.(<=) (0) k)
                   /\ (Int.(<) k
                      (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))) ->
                   ((select !intM_intP (shift t_0 k)) <> v))))))
              /\ ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 30 18 50#
                  ((Int.(>=) result (0)) ->
                   ((select !intM_intP (shift t_0 result)) = v)))
                 /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 16 40#
                    ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 16 29#
                     (Int.(<=) (Int.(-_) (1)) result))
                    /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 22 40#
                       (Int.(<) result
                       (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))))))) }

val _BinarySearch_binary_search_requires
 (t_0:(pointer _Object))
  (v:int) : int
   requires { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 27 17 26#
              (_Non_null_intM t_0 !_Object_alloc_table)) }
   reads { _Object_alloc_table, intM_intP } 
    ensures { (((is_sorted t_0 (old !_Object_alloc_table) (old !intM_intP)) ->
                (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 33 17 96#
                ((result = (Int.(-_) (1))) ->
                 (forall k:int.
                  (((Int.(<=) (0) k)
                   /\ (Int.(<) k
                      (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))) ->
                   ((select !intM_intP (shift t_0 k)) <> v))))))
              /\ ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 30 18 50#
                  ((Int.(>=) result (0)) ->
                   ((select !intM_intP (shift t_0 result)) = v)))
                 /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 16 40#
                    ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 16 29#
                     (Int.(<=) (Int.(-_) (1)) result))
                    /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 22 40#
                       (Int.(<) result
                       (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))))))) }

exception Exception_exc (pointer _Object)

exception Loop_continue_exc ()

exception Loop_exit_exc ()

val _Object_tag_table : ref (tag_table _Object)

exception Return_label_exc ()

exception Throwable_exc (pointer _Object)

val alloc_struct_BinarySearch
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { true } writes { _Object_alloc_table, _Object_tag_table }
     ensures { ((strict_valid_struct_BinarySearch result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result
                        _BinarySearch_tag)))) }

val alloc_struct_BinarySearch_requires
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { (Int.(>=) n (0)) } writes { _Object_alloc_table,
    _Object_tag_table }
     ensures { ((strict_valid_struct_BinarySearch result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result
                        _BinarySearch_tag)))) }

val alloc_struct_Exception
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { true } writes { _Object_alloc_table, _Object_tag_table }
     ensures { ((strict_valid_struct_Exception result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _Exception_tag)))) }

val alloc_struct_Exception_requires
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { (Int.(>=) n (0)) } writes { _Object_alloc_table,
    _Object_tag_table }
     ensures { ((strict_valid_struct_Exception result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _Exception_tag)))) }

val alloc_struct_Object
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { true } writes { _Object_alloc_table, _Object_tag_table }
     ensures { ((strict_valid_struct_Object result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _Object_tag)))) }

val alloc_struct_Object_requires
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { (Int.(>=) n (0)) } writes { _Object_alloc_table,
    _Object_tag_table }
     ensures { ((strict_valid_struct_Object result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _Object_tag)))) }

val alloc_struct_String
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { true } writes { _Object_alloc_table, _Object_tag_table }
     ensures { ((strict_valid_struct_String result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _String_tag)))) }

val alloc_struct_String_requires
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { (Int.(>=) n (0)) } writes { _Object_alloc_table,
    _Object_tag_table }
     ensures { ((strict_valid_struct_String result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _String_tag)))) }

val alloc_struct_Throwable
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { true } writes { _Object_alloc_table, _Object_tag_table }
     ensures { ((strict_valid_struct_Throwable result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _Throwable_tag)))) }

val alloc_struct_Throwable_requires
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { (Int.(>=) n (0)) } writes { _Object_alloc_table,
    _Object_tag_table }
     ensures { ((strict_valid_struct_Throwable result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result _Throwable_tag)))) }

val alloc_struct_intM
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { true } writes { _Object_alloc_table, _Object_tag_table }
     ensures { ((strict_valid_struct_intM result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result intM_tag)))) }

val alloc_struct_intM_requires
 (n:int)
  (_Object_alloc_table:ref (alloc_table _Object))
   (_Object_tag_table:ref (tag_table _Object)) : (pointer _Object)
    requires { (Int.(>=) n (0)) } writes { _Object_alloc_table,
    _Object_tag_table }
     ensures { ((strict_valid_struct_intM result (0) (Int.(-) n (1))
                !_Object_alloc_table)
               /\ ((alloc_extends (old !_Object_alloc_table)
                   !_Object_alloc_table)
                  /\ ((alloc_fresh (old !_Object_alloc_table) result n)
                     /\ (instanceof !_Object_tag_table result intM_tag)))) }

val interface_alloc_table : ref (alloc_table interface)

val interface_tag_table : ref (tag_table interface)

val alloc_struct_interface
 (n:int)
  (interface_alloc_table:ref (alloc_table interface))
   (interface_tag_table:ref (tag_table interface)) : (pointer interface)
    requires { true } writes { interface_alloc_table, interface_tag_table }
     ensures { ((strict_valid_struct_interface result (0) (Int.(-) n (1))
                !interface_alloc_table)
               /\ ((alloc_extends (old !interface_alloc_table)
                   !interface_alloc_table)
                  /\ ((alloc_fresh (old !interface_alloc_table) result n)
                     /\ (instanceof !interface_tag_table result
                        interface_tag)))) }

val alloc_struct_interface_requires
 (n:int)
  (interface_alloc_table:ref (alloc_table interface))
   (interface_tag_table:ref (tag_table interface)) : (pointer interface)
    requires { (Int.(>=) n (0)) } writes { interface_alloc_table,
    interface_tag_table }
     ensures { ((strict_valid_struct_interface result (0) (Int.(-) n (1))
                !interface_alloc_table)
               /\ ((alloc_extends (old !interface_alloc_table)
                   !interface_alloc_table)
                  /\ ((alloc_fresh (old !interface_alloc_table) result n)
                     /\ (instanceof !interface_tag_table result
                        interface_tag)))) }

val any_string_0
 (tt:()) : (pointer _Object) requires { true }  ensures { true }

val any_string_0_requires
 (tt:()) : (pointer _Object)
  requires { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0# true) }
   ensures { true }

val cons_BinarySearch
 (this_0:(pointer _Object)) : ()
  requires { true } reads { _Object_alloc_table }   ensures { true }

val cons_BinarySearch_requires
 (this_0:(pointer _Object)) : ()
  requires { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0# true) }
  reads { _Object_alloc_table }   ensures { true }

val java_array_length_intM
 (x_3:(pointer _Object)) : int
  requires { true } reads { _Object_alloc_table } 
   ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 51 11 103#
             ((Int.(<=) result (2147483647))
             /\ ((Int.(>=) result (0))
                /\ (result = (Int.(+) (offset_max !_Object_alloc_table x_3)
                             (1)))))) }

val java_array_length_intM_requires
 (x_3:(pointer _Object)) : int
  requires { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0# true) }
  reads { _Object_alloc_table } 
   ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 51 11 103#
             ((Int.(<=) result (2147483647))
             /\ ((Int.(>=) result (0))
                /\ (result = (Int.(+) (offset_max !_Object_alloc_table x_3)
                             (1)))))) }

val non_null_Object
 (x_4:(pointer _Object)) : Bool.bool
  requires { true } reads { _Object_alloc_table } 
   ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 57 11 65#
             (if result = True
              then ((offset_max !_Object_alloc_table x_4) = (0))
              else (x_4 = null))) }

val non_null_Object_requires
 (x_4:(pointer _Object)) : Bool.bool
  requires { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0# true) }
  reads { _Object_alloc_table } 
   ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 57 11 65#
             (if result = True
              then ((offset_max !_Object_alloc_table x_4) = (0))
              else (x_4 = null))) }

val non_null_intM
 (x_2:(pointer _Object)) : Bool.bool
  requires { true } reads { _Object_alloc_table } 
   ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 45 11 66#
             (if result = True
              then (Int.(>=) (offset_max !_Object_alloc_table x_2)
                   (Int.(-_) (1))) else (x_2 = null))) }

val non_null_intM_requires
 (x_2:(pointer _Object)) : Bool.bool
  requires { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0# true) }
  reads { _Object_alloc_table } 
   ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 45 11 66#
             (if result = True
              then (Int.(>=) (offset_max !_Object_alloc_table x_2)
                   (Int.(-_) (1))) else (x_2 = null))) }

let _BinarySearch_binary_search_ensures_default "W:diverges:N" "expl:Method binary_search, default behavior"
 #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 36 15 28#=
 fun (t_0 : (pointer _Object)) (v : int) ->
  requires { ((left_valid_struct_intM t_0 (0) !_Object_alloc_table)
             /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 27 17 26#
                (_Non_null_intM t_0 !_Object_alloc_table)))  }
  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 16 40#
            ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 16 29#
             (Int.(<=) (Int.(-_) (1)) result))
            /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 28 22 40#
               (Int.(<) result
               (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))))) } 
  ('Init: 
  (let return = ref (any_int ()) in
  try
   begin
     (let l = ref ('K_28:  (0)) in
     (let u =
     ref ('K_27: 
         (Int.(-) ('K_26: 
                  (let _jessie_16 = t_0 in
                  ("expl:precondition for call"
                  #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 37 16 24#
                  (java_array_length_intM _jessie_16)))) (1))) in
     begin
       try
        ('Loop_2: 
        loop
        invariant
          { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 34#
            ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 13#
             (Int.(<=) (0) !l))
            /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 17 34#
               (Int.(<=) !u
               (Int.(-) (Int.(+) (offset_max !_Object_alloc_table t_0) (1))
               (1)))))) } 
         begin
           any () requires { true }  ensures { true } ;
          try
           begin
             (if ('K_24:  (Int.(<=) !l !u))
             then
              (let m = ref (any_int ()) in
              begin
                (let _jessie_18 =
                (m := ('K_13: 
                      ("expl:division by zero"
                      #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 48 16 27#
                      (ComputerDivision.div ('K_12:  (Int.(+) !u !l)) (2))))) in
                ());
               ('K_17: 
               begin
                 (assert
                 { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 23#
                   ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 18#
                    (Int.(<=) !l !m))
                   /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 17 23#
                      (Int.(<=) !m !u)))) }; ());
                (if ('K_23: 
                    (Int.(<) ('K_22:  (safe_acc_ !intM_intP (shift t_0 !m))) v))
                then
                 (let _jessie_20 = (l := ('K_21:  (Int.(+) !m (1)))) in ())
                else
                 (if ('K_20: 
                     (Int.(>) ('K_19:  (safe_acc_ !intM_intP (shift t_0 !m))) v))
                 then
                  (let _jessie_22 = (u := ('K_18:  (Int.(-) !m (1)))) in ())
                 else begin   (return := !m); (raise Return) end)) end) end)
             else (raise (Loop_exit_exc ()))); (raise (Loop_continue_exc ()))
           end with Loop_continue_exc _jessie_2 -> () end end end) with
        Loop_exit_exc _jessie_1 -> () end;
      (return := ('K_25:  (Int.(-_) (1)))); (raise Return) end)); absurd  end
   with Return -> !return end)) 

let _BinarySearch_binary_search_ensures_failure "W:diverges:N" "expl:Method binary_search, Behavior `failure'"
 #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 36 15 28#=
 fun (t_0 : (pointer _Object)) (v : int) ->
  requires { ((is_sorted t_0 !_Object_alloc_table !intM_intP)
             /\ ((left_valid_struct_intM t_0 (0) !_Object_alloc_table)
                /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 27 17 26#
                   (_Non_null_intM t_0 !_Object_alloc_table))))  }
  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 33 17 96#
            ((result = (Int.(-_) (1))) ->
             (forall k:int.
              (((Int.(<=) (0) k)
               /\ (Int.(<) k
                  (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))) ->
               ((select !intM_intP (shift t_0 k)) <> v))))) } 
  ('Init: 
  (let return = ref (any_int ()) in
  try
   begin
     (let l = ref ('K_28:  (0)) in
     (let u =
     ref ('K_27: 
         (Int.(-) ('K_26: 
                  (let _jessie_38 = t_0 in
                  ("expl:precondition for call"
                  #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 37 16 24#
                  (java_array_length_intM _jessie_38)))) (1))) in
     begin
       try
        ('Loop_4: 
        loop
        invariant
          { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 42 8 74#
            (forall k_0:int.
             (((Int.(<=) (0) k_0)
              /\ (Int.(<) k_0
                 (Int.(+) (offset_max !_Object_alloc_table t_0) (1)))) ->
              (((select !intM_intP (shift t_0 k_0)) = v) ->
               ((Int.(<=) !l k_0) /\ (Int.(<=) k_0 !u)))))) } 
         begin
           any ()
           requires { true } reads { _Object_alloc_table, l, u } 
            ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 34#
                      ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 13#
                       (Int.(<=) (0) !l))
                      /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 17 34#
                         (Int.(<=) !u
                         (Int.(-)
                         (Int.(+) (offset_max !_Object_alloc_table t_0) (1))
                         (1)))))) } ;
          try
           begin
             (if ('K_24:  (Int.(<=) !l !u))
             then
              (let m = ref (any_int ()) in
              begin
                (let _jessie_40 =
                (m := ('K_13: 
                      ("expl:division by zero"
                      #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 48 16 27#
                      (ComputerDivision.div ('K_12:  (Int.(+) !u !l)) (2))))) in
                ());
               ('K_17: 
               begin
                 any ()
                 requires { true } reads { l, m, u } 
                  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 23#
                            ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 18#
                             (Int.(<=) !l !m))
                            /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 17 23#
                               (Int.(<=) !m !u)))) } ;
                (if ('K_23: 
                    (Int.(<) ('K_22:  (safe_acc_ !intM_intP (shift t_0 !m))) v))
                then
                 (let _jessie_42 = (l := ('K_21:  (Int.(+) !m (1)))) in ())
                else
                 (if ('K_20: 
                     (Int.(>) ('K_19:  (safe_acc_ !intM_intP (shift t_0 !m))) v))
                 then
                  (let _jessie_44 = (u := ('K_18:  (Int.(-) !m (1)))) in ())
                 else begin   (return := !m); (raise Return) end)) end) end)
             else (raise (Loop_exit_exc ()))); (raise (Loop_continue_exc ()))
           end with Loop_continue_exc _jessie_2 -> () end end end) with
        Loop_exit_exc _jessie_1 -> () end;
      (return := ('K_25:  (Int.(-_) (1)))); (raise Return) end)); absurd  end
   with Return -> !return end)) 

let _BinarySearch_binary_search_ensures_success "W:diverges:N" "expl:Method binary_search, Behavior `success'"
 #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 36 15 28#=
 fun (t_0 : (pointer _Object)) (v : int) ->
  requires { ((left_valid_struct_intM t_0 (0) !_Object_alloc_table)
             /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 27 17 26#
                (_Non_null_intM t_0 !_Object_alloc_table)))  }
  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 30 18 50#
            ((Int.(>=) result (0)) ->
             ((select !intM_intP (shift t_0 result)) = v))) } 
  ('Init: 
  (let return = ref (any_int ()) in
  try
   begin
     (let l = ref ('K_28:  (0)) in
     (let u =
     ref ('K_27: 
         (Int.(-) ('K_26: 
                  (let _jessie_27 = t_0 in
                  ("expl:precondition for call"
                  #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 37 16 24#
                  (java_array_length_intM _jessie_27)))) (1))) in
     begin
       try
        ('Loop_3: 
        loop
        invariant
          { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 94 12 1265#
            true) } 
         begin
           any ()
           requires { true } reads { _Object_alloc_table, l, u } 
            ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 34#
                      ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 13#
                       (Int.(<=) (0) !l))
                      /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 17 34#
                         (Int.(<=) !u
                         (Int.(-)
                         (Int.(+) (offset_max !_Object_alloc_table t_0) (1))
                         (1)))))) } ;
          try
           begin
             (if ('K_24:  (Int.(<=) !l !u))
             then
              (let m = ref (any_int ()) in
              begin
                (let _jessie_29 =
                (m := ('K_13: 
                      ("expl:division by zero"
                      #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 48 16 27#
                      (ComputerDivision.div ('K_12:  (Int.(+) !u !l)) (2))))) in
                ());
               ('K_17: 
               begin
                 any ()
                 requires { true } reads { l, m, u } 
                  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 23#
                            ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 18#
                             (Int.(<=) !l !m))
                            /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 17 23#
                               (Int.(<=) !m !u)))) } ;
                (if ('K_23: 
                    (Int.(<) ('K_22:  (safe_acc_ !intM_intP (shift t_0 !m))) v))
                then
                 (let _jessie_31 = (l := ('K_21:  (Int.(+) !m (1)))) in ())
                else
                 (if ('K_20: 
                     (Int.(>) ('K_19:  (safe_acc_ !intM_intP (shift t_0 !m))) v))
                 then
                  (let _jessie_33 = (u := ('K_18:  (Int.(-) !m (1)))) in ())
                 else begin   (return := !m); (raise Return) end)) end) end)
             else (raise (Loop_exit_exc ()))); (raise (Loop_continue_exc ()))
           end with Loop_continue_exc _jessie_2 -> () end end end) with
        Loop_exit_exc _jessie_1 -> () end;
      (return := ('K_25:  (Int.(-_) (1)))); (raise Return) end)); absurd  end
   with Return -> !return end)) 

let _BinarySearch_binary_search_safety "expl:Method binary_search, Safety"
 #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 36 15 28#=
 fun (t_0 : (pointer _Object)) (v : int) ->
  requires { ((left_valid_struct_intM t_0 (0) !_Object_alloc_table)
             /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 27 17 26#
                (_Non_null_intM t_0 !_Object_alloc_table)))  }
  ensures { true } 
  ('Init: 
  (let return = ref (any_int ()) in
  try
   begin
     (let l = ref ('K_28:  (0)) in
     (let u =
     ref ('K_27: 
         (Int.(-) ('K_26: 
                  (let _jessie_5 = t_0 in
                  ("expl:index bounds"
                  #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 37 16 24#
                  (assert
                  { (Int.(>=) (offset_max !_Object_alloc_table _jessie_5)
                    (-1)) };
                  ("expl:precondition for call"
                  #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 37 16 24#
                  (java_array_length_intM_requires _jessie_5)))))) (1))) in
     begin
       try
        ('Loop_1: 
        loop
        invariant
          { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.jc" 94 12 1265#
            true) }
          variant { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 44 7 10# 
            (Int.(-) !u !l)) }
         begin
           any ()
           requires { true } reads { _Object_alloc_table, l, u } 
            ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 34#
                      ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 7 13#
                       (Int.(<=) (0) !l))
                      /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 39 17 34#
                         (Int.(<=) !u
                         (Int.(-)
                         (Int.(+) (offset_max !_Object_alloc_table t_0) (1))
                         (1)))))) } ;
          try
           begin
             (if ('K_24:  (Int.(<=) !l !u))
             then
              (let m = ref (any_int ()) in
              begin
                (let _jessie_7 =
                (m := ('K_13: 
                      ("expl:division by zero"
                      #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 48 16 27#
                      (computer_div_ ('K_12:  (Int.(+) !u !l)) (2))))) in ());
               ('K_17: 
               begin
                 any ()
                 requires { true } reads { l, m, u } 
                  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 23#
                            ((#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 12 18#
                             (Int.(<=) !l !m))
                            /\ (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 49 17 23#
                               (Int.(<=) !m !u)))) } ;
                (if ('K_23: 
                    (Int.(<) ('K_22: 
                             ("expl:pointer dereference"
                             #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 50 9 13#
                             (offset_acc_ !_Object_alloc_table !intM_intP t_0 !m))) v))
                then
                 (let _jessie_9 = (l := ('K_21:  (Int.(+) !m (1)))) in ())
                else
                 (if ('K_20: 
                     (Int.(>) ('K_19: 
                              ("expl:pointer dereference"
                              #"/home/eo37/Desktop/Thesis/Code/BinarySearch/Krakatoa/BinarySearch.java" 51 14 18#
                              (offset_acc_ !_Object_alloc_table !intM_intP t_0 !m))) v))
                 then
                  (let _jessie_11 = (u := ('K_18:  (Int.(-) !m (1)))) in ())
                 else begin   (return := !m); (raise Return) end)) end) end)
             else (raise (Loop_exit_exc ()))); (raise (Loop_continue_exc ()))
           end with Loop_continue_exc _jessie_2 -> () end end end) with
        Loop_exit_exc _jessie_1 -> () end;
      (return := ('K_25:  (Int.(-_) (1)))); (raise Return) end)); absurd  end
   with Return -> !return end)) 

let cons_BinarySearch_ensures_default "W:diverges:N" "expl:Constructor of class BinarySearch, default behavior"
 #"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0#=
 fun (this_0 : (pointer _Object)) ->
  requires { (valid_struct_BinarySearch this_0 (0) (0) !_Object_alloc_table)  }
  ensures { (#"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0# true) } 
  ('Init:  try begin   (); (raise Return) end with Return -> () end) 

let cons_BinarySearch_safety "expl:Constructor of class BinarySearch, Safety"
 #"/home/eo37/Desktop/Thesis/Code/BinarySearch/" 0 0 0#=
 fun (this_0 : (pointer _Object)) ->
  requires { (valid_struct_BinarySearch this_0 (0) (0) !_Object_alloc_table)  }
  ensures { true } 
  ('Init:  try begin   (); (raise Return) end with Return -> () end) 

end


